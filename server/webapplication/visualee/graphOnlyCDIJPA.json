{"nodes":[{"name":"Configurator","group":2,"description":"<nobr>Package: poolingpeople.webapplication.business.configuration.control</nobr>","sourcecode":"package poolingpeople.webapplication.business.configuration.control;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PostConstruct;\nimport javax.ejb.Singleton;\nimport javax.ejb.Startup;\n\n@Startup\n@Singleton\npublic class Configurator {\n\tprivate Map&lt;String, String&gt; config;\n\n\t@SuppressWarnings(\"serial\")\n\t@PostConstruct\n\tprivate void loadConfiguration() {\n\t\tconfig = new HashMap&lt;String, String&gt;() {\n\t\t\t{\n\t\t\t\tput(\"test\", \"asdf\");\n\t\t\t\tput(\"debug\",\"false\");\n\t\t\t\tput(\"isLogging\",\"true\");\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic String getStringValue(String key) {\n\t\treturn (containsKey(key)) ? config.get(key) : \"\";\n\t}\n\n\tpublic long getLongValue(String key) {\n\t\treturn (containsKey(key)) ? Long.parseLong(config.get(key)) : 0l;\n\t}\n\n\tpublic int getIntValue(String key) {\n\t\treturn (containsKey(key)) ? Integer.parseInt(config.get(key)) : 0x0;\n\t}\n\n\tpublic boolean getBooleanValue(String key) {\n\t\treturn (containsKey(key)) ? Boolean.parseBoolean(config.get(key)) : false;\n\t}\n\n\tprivate boolean containsKey(String key) {\n\t\treturn (config.containsKey(key));\n\t}\n}\n","id":0},{"name":"ConfigurationProducer","group":3,"description":"<nobr>Package: poolingpeople.webapplication.business.configuration.boundary</nobr><br/><br/>Injects:<br/><nobr>Configurator is injected</nobr><br/><br/>Produces:<br/><nobr>Produces String</nobr><br/><nobr>Produces Long</nobr><br/><nobr>Produces Integer</nobr><br/><nobr>Produces Boolean</nobr>","sourcecode":"package poolingpeople.webapplication.business.configuration.boundary;\n\nimport javax.enterprise.inject.Produces;\nimport javax.enterprise.inject.spi.AnnotatedField;\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport javax.inject.Inject;\n\nimport poolingpeople.webapplication.business.configuration.control.Configurator;\n\npublic class ConfigurationProducer {\n\t@Inject\n\tConfigurator configurator;\n\t\n\t@Produces \n\tpublic String injectStringValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getStringValue(getValueFromAnnotation(point)) : \"\";\n\t}\n\n\t@Produces \n\tpublic long injectLongValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getLongValue(getValueFromAnnotation(point)) : 0;\n\t}\n\t\n\t@Produces \n\tpublic int injectIntValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getIntValue(getValueFromAnnotation(point)) : 0;\n\t}\n\t\n\t@Produces \n\tpublic boolean injectBooleanValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getBooleanValue(getValueFromAnnotation(point)) : false;\n\t}\n\t\n\tprivate String getValueFromAnnotation(InjectionPoint point) {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tAnnotatedField&lt;Configurable&gt; field = (AnnotatedField&lt;Configurable&gt;) point.getAnnotated();\n\t\tConfigurable configuration = field.getAnnotation(Configurable.class);\n\t\treturn (configuration != null) ? configuration.value() : \"\";\n\t}\n\n\tprivate boolean hasFieldAnnotation(InjectionPoint point) {\n\t\treturn (point.getAnnotated() == null || !(point.getAnnotated() instanceof AnnotatedField)) ? false : true; \n\t}\n}\n","id":1},{"name":"Users","group":1,"description":"<nobr>Package: poolingpeople.webapplication.business.user.entity</nobr><br/><br/>One to one relations:<br/><nobr>One to one relation to Login</nobr>","sourcecode":"package poolingpeople.webapplication.business.user.entity;\n\nimport java.io.Serializable;\n\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.OneToOne;\n\n@Entity\npublic class Users implements Serializable {\n\t \n\t@Id @GeneratedValue()\n\tprivate long id;\n\tprivate String firstName; \n\tprivate String lastName;\n\tprivate String username;\n\t@OneToOne private Login login;\n\t@Embedded private Address address;\n\tprivate static final long serialVersionUID = 1L;\n\tpublic Users() {\n\t\tsuper();\n\t} \n\t   \n\tpublic String getFirstName() {\n \t\treturn this.firstName;\n\t}\n\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\t   \n\tpublic String getLastName() {\n \t\treturn this.lastName;\n\t}\n\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\t   \n\tpublic long getId() {\n \t\treturn this.id;\n\t}\n\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic Login getLogin() {\n\t\treturn login;\n\t}\n\n\tpublic void setLogin(Login login) {\n\t\tthis.login = login;\n\t}\n\n\tpublic Address getAddress() {\n\t\treturn address;\n\t}\n\n\tpublic void setAddress(Address address) {\n\t\tthis.address = address;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Users [id=\" + id + \", firstName=\" + firstName + \", lastName=\"\n\t\t\t\t+ lastName + \", username=\" + username + \", login=\" + login.getId()\n\t\t\t\t+ \", address=\" + address + \"]\";\n\t}\n\t\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\t\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\t\n   \n}\n","id":2},{"name":"Boolean","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":3},{"name":"ItLogging","group":5,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.it</nobr><br/><br/>Injects:<br/><nobr>WhateverLogger is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.it;\n\nimport static org.junit.Assert.*;\n\nimport javax.inject.Inject;\n\nimport org.jboss.arquillian.container.test.api.Deployment;\nimport org.jboss.arquillian.junit.Arquillian;\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.asset.EmptyAsset;\nimport org.jboss.shrinkwrap.api.spec.JavaArchive;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\nimport poolingpeople.webapplication.business.configuration.boundary.ConfigurationProducer;\nimport poolingpeople.webapplication.business.configuration.control.Configurator;\nimport poolingpeople.webapplication.business.logging.boundary.LoggerProducer;\nimport poolingpeople.webapplication.business.logging.boundary.NullableLogger;\nimport poolingpeople.webapplication.business.logging.boundary.SimpleLogger;\nimport poolingpeople.webapplication.business.logging.boundary.WhateverLogger;\n\n@RunWith(Arquillian.class)\npublic class ItLogging {\n\n\t@Inject\n\tWhateverLogger whateverLogger;\n\n\t@Deployment\n\tpublic static JavaArchive createDeployment() {\n\t\treturn ShrinkWrap\n\t\t\t\t.create(JavaArchive.class)\n\t\t\t\t.addClasses(WhateverLogger.class, NullableLogger.class,\n\t\t\t\t\t\tSimpleLogger.class, LoggerProducer.class,\n\t\t\t\t\t\tConfigurationProducer.class,Configurable.class,\n\t\t\t\t\t\tConfigurator.class)\n\t\t\t\t.addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n\t}\n\t\n\t@Test\n\tpublic void injectWhateverLogger() {\n\t\tassertNotNull(whateverLogger);\n\t}\n\n\t@Test\n\tpublic void injectSimpleLogger(){\n\t\tassertEquals(SimpleLogger.class, whateverLogger.getClass());\n\t}\n}\n","id":4},{"name":"ItConfiguration","group":7,"description":"<nobr>Package: poolingpeople.webapplication.business.configuration.it</nobr><br/><br/>Injects:<br/><nobr>ItConfigurable is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.configuration.it;\n\nimport static org.junit.Assert.*;\n\nimport javax.inject.Inject;\n\nimport org.jboss.arquillian.container.test.api.Deployment;\nimport org.jboss.arquillian.junit.Arquillian;\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.asset.EmptyAsset;\nimport org.jboss.shrinkwrap.api.spec.JavaArchive;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport poolingpeople.webapplication.business.configuration.boundary.ConfigurationProducer;\nimport poolingpeople.webapplication.business.configuration.control.Configurator;\n\n@RunWith(Arquillian.class)\npublic class ItConfiguration {\n\n\t@Inject\n\tItConfigurable configurable;\n\n\t@Deployment\n\tpublic static JavaArchive createDeployment() {\n\t\treturn ShrinkWrap\n\t\t\t\t.create(JavaArchive.class)\n\t\t\t\t.addClasses(ItConfigurable.class, ConfigurationProducer.class,Configurator.class)\n\t\t\t\t.addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n\t}\n\n\t@Test\n\tpublic void injectItconfigurable() {\n\t\tassertNotNull(configurable);\n\t}\n\t\n\t@Test\n\tpublic void injectBoolean() {\n\t\tassertEquals(true, configurable.isLogging);\n\t}\n\n\t@Test\n\tpublic void injectString(){\n\t\tassertEquals(\"asdf\", configurable.testString);\n\t}\n\t\n\t@Test\n\tpublic void injectNotValidKey(){\n\t\tassertEquals(0,configurable.notValidKey);\n\t}\n}\n","id":5},{"name":"ItConfigurable","group":7,"description":"<nobr>Package: poolingpeople.webapplication.business.configuration.it</nobr><br/><br/>Injects:<br/><nobr>Boolean is injected</nobr><br/><nobr>String is injected</nobr><br/><nobr>Integer is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.configuration.it;\n\nimport javax.inject.Inject;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\n\npublic class ItConfigurable {\n\n\t@Inject @Configurable(\"isLogging\") boolean isLogging;\n\t@Inject @Configurable(\"test\") String testString;\n\t@Inject @Configurable(\"NOT_VALID_KEY\") int notValidKey;\n}\n","id":6},{"name":"WhateverLogger","group":8,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.boundary</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.boundary;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * WhateverLogger is effectively a simple delegating object to an real Logger instance created by LoggerProducer\n * @see LoggerProducer\n */\npublic interface WhateverLogger {\n\tpublic void log(Level logLevel, String message, Object[] args);\n\tpublic Logger getLogger();\n}\n","id":7},{"name":"LoggerProducer","group":8,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.boundary</nobr><br/><br/>Injects:<br/><nobr>Boolean is injected</nobr><br/><br/>Produces:<br/><nobr>Produces WhateverLogger</nobr><br/><nobr>Produces Logger</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.boundary;\n\nimport java.util.logging.Logger;\n\nimport javax.enterprise.inject.Produces;\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport javax.inject.Inject;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\n\n/**\n * LoggerProduces creates depending on the isLogging flag a WhateverLogger for an injected instance \n * Also it creates a standard Logger for the LoggerInterceptor\n */\npublic class LoggerProducer {\n\t@Inject @Configurable(\"isLogging\")\n\tprivate boolean isLogging;\n\t\n\t@Produces \n\tpublic WhateverLogger produceLoggerInstance(InjectionPoint point) {\n\t\tString className = point.getMember().getDeclaringClass().getName();\n\t\treturn (isLogging) ? new SimpleLogger(className) : new NullableLogger(); \n\t}\n\t\n\t@Produces\n\tpublic Logger produceStandardLogger(InjectionPoint point) {\n\t\tString className = point.getMember().getDeclaringClass().getName();\n\t\treturn Logger.getLogger(className);\n\t}\n}\n","id":8},{"name":"LoggerInterceptor","group":8,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.boundary</nobr><br/><br/>Injects:<br/><nobr>Logger is injected</nobr><br/><nobr>Boolean is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.boundary;\n\nimport java.util.logging.Logger;\n\nimport javax.inject.Inject;\nimport javax.interceptor.AroundInvoke;\nimport javax.interceptor.Interceptor;\nimport javax.interceptor.InvocationContext;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\n\n@Interceptor\n@Loggable\npublic class LoggerInterceptor {\n\t@Inject\n\tprivate Logger logger;\n\t@Inject @Configurable(\"isLogging\")\n\tprivate boolean isLogginOn;\n\n\t@AroundInvoke\n\tpublic Object logMethod(InvocationContext context) throws Exception {\n\t\treturn (isLogginOn) ? logMethodInvocation(context) : noLogging(context) ;\n\t}\n\n\tprivate Object noLogging(InvocationContext context) throws Exception {\n\t\treturn context.proceed();\n\t}\n\n\tprivate Object logMethodInvocation(InvocationContext context)\n\t\t\tthrows Exception {\n\t\tlogger.info(\"Entering: \" +\n\t\t\t\tcontext.getMethod().getDeclaringClass().getCanonicalName()+\"#\"+ \n\t\t\t\tcontext.getMethod().getName() + stringifyParameters(context.getParameters()));\n\t\ttry {\n\t\t\treturn context.proceed();\n\t\t} finally {\n\t\t\tlogger.info(\"Exiting: \"+context.getMethod().getDeclaringClass().getCanonicalName()+\"#\"+ context.getMethod().getName());\n\t\t}\n\t}\n\n\tprivate String stringifyParameters(Object[] params) {\n\n\t\tString stringifiedParams = \"\";\n\n\t\tif (params != null) {\n\t\t\tfor(Object param : params) {\n\t\t\t\tif(param == null) continue;\n\t\t\t\tstringifiedParams += \":\" + param.toString();\n\t\t\t}\n\t\t}\n\t\treturn stringifiedParams; \n\t}\n}\n","id":9},{"name":"Integer","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":10},{"name":"Login","group":1,"description":"<nobr>Package: poolingpeople.webapplication.business.user.entity</nobr><br/><br/>One to one relations:<br/><nobr>One to one relation to Users</nobr>","sourcecode":"package poolingpeople.webapplication.business.user.entity;\n\nimport java.io.Serializable;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.OneToOne;\n\n@Entity\npublic class Login implements Serializable {\n\n\t@Id @GeneratedValue\n\tprivate long id;\n\tprivate String email; \n\tprivate String password; \n\tprivate String confirmationLink; \n\tprivate boolean isConfirmed;\n\t@OneToOne private Users user;\n\tprivate static final long serialVersionUID = 1L;\t\n\tpublic Login() {\n\t\tsuper();\n\t} \n\t   \n\tpublic String getEmail() {\n \t\treturn this.email;\n\t}\n\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\t   \n\tpublic String getPassword() {\n \t\treturn this.password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\t   \n\tpublic String getConfirmationLink() {\n \t\treturn this.confirmationLink;\n\t}\n\n\tpublic void setConfirmationLink(String confirmationLink) {\n\t\tthis.confirmationLink = confirmationLink;\n\t}\n\t   \n\tpublic boolean getIsConfirmed() {\n \t\treturn this.isConfirmed;\n\t}\n\n\tpublic void setIsConfirmed(boolean isConfirmed) {\n\t\tthis.isConfirmed = isConfirmed;\n\t}\n\t\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\t\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic Users getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(Users user) {\n\t\tthis.user = user;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Login [id=\" + id + \", email=\" + email + \", password=####\"\n\t\t\t\t + \", confirmationLink=\" + confirmationLink\n\t\t\t\t+ \", isConfirmed=\" + isConfirmed + \", user=\" + user.getId() + \"]\";\n\t}\n   \n}\n","id":11},{"name":"Logger","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":12},{"name":"Long","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":13},{"name":"String","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":14}],"links":[{"source":11,"target":2,"value":1,"type":"ONE_TO_ONE"},{"source":0,"target":1,"value":1,"type":"INJECT"},{"source":1,"target":14,"value":1,"type":"PRODUCES"},{"source":1,"target":13,"value":1,"type":"PRODUCES"},{"source":1,"target":10,"value":1,"type":"PRODUCES"},{"source":1,"target":3,"value":1,"type":"PRODUCES"},{"source":7,"target":4,"value":1,"type":"INJECT"},{"source":6,"target":5,"value":1,"type":"INJECT"},{"source":3,"target":8,"value":1,"type":"INJECT"},{"source":8,"target":7,"value":1,"type":"PRODUCES"},{"source":8,"target":12,"value":1,"type":"PRODUCES"},{"source":3,"target":6,"value":1,"type":"INJECT"},{"source":14,"target":6,"value":1,"type":"INJECT"},{"source":10,"target":6,"value":1,"type":"INJECT"},{"source":2,"target":11,"value":1,"type":"ONE_TO_ONE"},{"source":12,"target":9,"value":1,"type":"INJECT"},{"source":3,"target":9,"value":1,"type":"INJECT"}]}
