{"nodes":[{"name":"ConfigurationProducer","group":3,"description":"<nobr>Package: poolingpeople.webapplication.business.configuration.boundary</nobr><br/><br/>Injects:<br/><nobr>Configurator is injected</nobr><br/><br/>Produces:<br/><nobr>Produces String</nobr><br/><nobr>Produces Long</nobr><br/><nobr>Produces Integer</nobr><br/><nobr>Produces Boolean</nobr>","sourcecode":"package poolingpeople.webapplication.business.configuration.boundary;\n\nimport javax.enterprise.inject.Produces;\nimport javax.enterprise.inject.spi.AnnotatedField;\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport javax.inject.Inject;\n\nimport poolingpeople.webapplication.business.configuration.control.Configurator;\n\npublic class ConfigurationProducer {\n\t@Inject\n\tConfigurator configurator;\n\t\n\t@Produces \n\tpublic String injectStringValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getStringValue(getValueFromAnnotation(point)) : \"\";\n\t}\n\n\t@Produces \n\tpublic long injectLongValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getLongValue(getValueFromAnnotation(point)) : 0;\n\t}\n\t\n\t@Produces \n\tpublic int injectIntValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getIntValue(getValueFromAnnotation(point)) : 0;\n\t}\n\t\n\t@Produces \n\tpublic boolean injectBooleanValue(InjectionPoint point) {\n\t\treturn (hasFieldAnnotation(point)) ? configurator.getBooleanValue(getValueFromAnnotation(point)) : false;\n\t}\n\t\n\tprivate String getValueFromAnnotation(InjectionPoint point) {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tAnnotatedField&lt;Configurable&gt; field = (AnnotatedField&lt;Configurable&gt;) point.getAnnotated();\n\t\tConfigurable configuration = field.getAnnotation(Configurable.class);\n\t\treturn (configuration != null) ? configuration.value() : \"\";\n\t}\n\n\tprivate boolean hasFieldAnnotation(InjectionPoint point) {\n\t\treturn (point.getAnnotated() == null || !(point.getAnnotated() instanceof AnnotatedField)) ? false : true; \n\t}\n}\n","id":0},{"name":"Boolean","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":1},{"name":"ItLogging","group":5,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.it</nobr><br/><br/>Injects:<br/><nobr>WhateverLogger is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.it;\n\nimport static org.junit.Assert.*;\n\nimport javax.inject.Inject;\n\nimport org.jboss.arquillian.container.test.api.Deployment;\nimport org.jboss.arquillian.junit.Arquillian;\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.asset.EmptyAsset;\nimport org.jboss.shrinkwrap.api.spec.JavaArchive;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\nimport poolingpeople.webapplication.business.configuration.boundary.ConfigurationProducer;\nimport poolingpeople.webapplication.business.configuration.control.Configurator;\nimport poolingpeople.webapplication.business.logging.boundary.LoggerProducer;\nimport poolingpeople.webapplication.business.logging.boundary.NullableLogger;\nimport poolingpeople.webapplication.business.logging.boundary.SimpleLogger;\nimport poolingpeople.webapplication.business.logging.boundary.WhateverLogger;\n\n@RunWith(Arquillian.class)\npublic class ItLogging {\n\n\t@Inject\n\tWhateverLogger whateverLogger;\n\n\t@Deployment\n\tpublic static JavaArchive createDeployment() {\n\t\treturn ShrinkWrap\n\t\t\t\t.create(JavaArchive.class)\n\t\t\t\t.addClasses(WhateverLogger.class, NullableLogger.class,\n\t\t\t\t\t\tSimpleLogger.class, LoggerProducer.class,\n\t\t\t\t\t\tConfigurationProducer.class,Configurable.class,\n\t\t\t\t\t\tConfigurator.class)\n\t\t\t\t.addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n\t}\n\t\n\t@Test\n\tpublic void injectWhateverLogger() {\n\t\tassertNotNull(whateverLogger);\n\t}\n\n\t@Test\n\tpublic void injectSimpleLogger(){\n\t\tassertEquals(SimpleLogger.class, whateverLogger.getClass());\n\t}\n}\n","id":2},{"name":"ItConfigurable","group":7,"description":"<nobr>Package: poolingpeople.webapplication.business.configuration.it</nobr><br/><br/>Injects:<br/><nobr>Boolean is injected</nobr><br/><nobr>String is injected</nobr><br/><nobr>Integer is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.configuration.it;\n\nimport javax.inject.Inject;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\n\npublic class ItConfigurable {\n\n\t@Inject @Configurable(\"isLogging\") boolean isLogging;\n\t@Inject @Configurable(\"test\") String testString;\n\t@Inject @Configurable(\"NOT_VALID_KEY\") int notValidKey;\n}\n","id":3},{"name":"WhateverLogger","group":8,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.boundary</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.boundary;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * WhateverLogger is effectively a simple delegating object to an real Logger instance created by LoggerProducer\n * @see LoggerProducer\n */\npublic interface WhateverLogger {\n\tpublic void log(Level logLevel, String message, Object[] args);\n\tpublic Logger getLogger();\n}\n","id":4},{"name":"LoggerProducer","group":8,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.boundary</nobr><br/><br/>Injects:<br/><nobr>Boolean is injected</nobr><br/><br/>Produces:<br/><nobr>Produces WhateverLogger</nobr><br/><nobr>Produces Logger</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.boundary;\n\nimport java.util.logging.Logger;\n\nimport javax.enterprise.inject.Produces;\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport javax.inject.Inject;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\n\n/**\n * LoggerProduces creates depending on the isLogging flag a WhateverLogger for an injected instance \n * Also it creates a standard Logger for the LoggerInterceptor\n */\npublic class LoggerProducer {\n\t@Inject @Configurable(\"isLogging\")\n\tprivate boolean isLogging;\n\t\n\t@Produces \n\tpublic WhateverLogger produceLoggerInstance(InjectionPoint point) {\n\t\tString className = point.getMember().getDeclaringClass().getName();\n\t\treturn (isLogging) ? new SimpleLogger(className) : new NullableLogger(); \n\t}\n\t\n\t@Produces\n\tpublic Logger produceStandardLogger(InjectionPoint point) {\n\t\tString className = point.getMember().getDeclaringClass().getName();\n\t\treturn Logger.getLogger(className);\n\t}\n}\n","id":5},{"name":"LoggerInterceptor","group":8,"description":"<nobr>Package: poolingpeople.webapplication.business.logging.boundary</nobr><br/><br/>Injects:<br/><nobr>Logger is injected</nobr><br/><nobr>Boolean is injected</nobr>","sourcecode":"package poolingpeople.webapplication.business.logging.boundary;\n\nimport java.util.logging.Logger;\n\nimport javax.inject.Inject;\nimport javax.interceptor.AroundInvoke;\nimport javax.interceptor.Interceptor;\nimport javax.interceptor.InvocationContext;\n\nimport poolingpeople.webapplication.business.configuration.boundary.Configurable;\n\n@Interceptor\n@Loggable\npublic class LoggerInterceptor {\n\t@Inject\n\tprivate Logger logger;\n\t@Inject @Configurable(\"isLogging\")\n\tprivate boolean isLogginOn;\n\n\t@AroundInvoke\n\tpublic Object logMethod(InvocationContext context) throws Exception {\n\t\treturn (isLogginOn) ? logMethodInvocation(context) : noLogging(context) ;\n\t}\n\n\tprivate Object noLogging(InvocationContext context) throws Exception {\n\t\treturn context.proceed();\n\t}\n\n\tprivate Object logMethodInvocation(InvocationContext context)\n\t\t\tthrows Exception {\n\t\tlogger.info(\"Entering: \" +\n\t\t\t\tcontext.getMethod().getDeclaringClass().getCanonicalName()+\"#\"+ \n\t\t\t\tcontext.getMethod().getName() + stringifyParameters(context.getParameters()));\n\t\ttry {\n\t\t\treturn context.proceed();\n\t\t} finally {\n\t\t\tlogger.info(\"Exiting: \"+context.getMethod().getDeclaringClass().getCanonicalName()+\"#\"+ context.getMethod().getName());\n\t\t}\n\t}\n\n\tprivate String stringifyParameters(Object[] params) {\n\n\t\tString stringifiedParams = \"\";\n\n\t\tif (params != null) {\n\t\t\tfor(Object param : params) {\n\t\t\t\tif(param == null) continue;\n\t\t\t\tstringifiedParams += \":\" + param.toString();\n\t\t\t}\n\t\t}\n\t\treturn stringifiedParams; \n\t}\n}\n","id":6},{"name":"Integer","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":7},{"name":"Logger","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":8},{"name":"String","group":4,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":9}],"links":[{"source":1,"target":5,"value":1,"type":"INJECT"},{"source":5,"target":4,"value":1,"type":"PRODUCES"},{"source":5,"target":8,"value":1,"type":"PRODUCES"},{"source":1,"target":3,"value":1,"type":"INJECT"},{"source":9,"target":3,"value":1,"type":"INJECT"},{"source":7,"target":3,"value":1,"type":"INJECT"},{"source":0,"target":9,"value":1,"type":"PRODUCES"},{"source":0,"target":7,"value":1,"type":"PRODUCES"},{"source":0,"target":1,"value":1,"type":"PRODUCES"},{"source":4,"target":2,"value":1,"type":"INJECT"},{"source":8,"target":6,"value":1,"type":"INJECT"},{"source":1,"target":6,"value":1,"type":"INJECT"}]}
